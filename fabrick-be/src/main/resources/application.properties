#Inseriamo il numero della porta
spring.application.name=Fabrick Test Api
spring.application.version=0.0.1 SNAPSHOT
spring.application.formatted-version=(v0.0.1 SNAPSHOT)
spring.security.user.name=user
spring.security.user.password=password
spring.security.user.roles=USER
spring.profiles.active=default
server.port=8080


#Endpoint ServiceRest https://sandbox.platfr.io
platfr.io.rest.endpoint.account=https://sandbox.platfr.io/api/gbs/banking/v4.0/accounts/{accountId}
platfr.io.rest.endpoint.balance=https://sandbox.platfr.io/api/gbs/banking/v4.0/accounts/{accountId}/balance
platfr.io.rest.endpoint.Transaction=https://sandbox.platfr.io/api/gbs/banking/v4.0/accounts/{accountId}/transactions?fromAccountingDate={fromAccountingDate}&toAccountingDate={toAccountingDate}
platfr.io.auth.endpoint.moneyTransfers=https://sandbox.platfr.io/api/gbs/banking/v4.0/accounts/{accountId}/payments/money-transfers

#MySql
spring.datasource.url = jdbc:mysql://localhost:3306/fabrick?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username = fabrick
spring.datasource.password = fabrick

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
